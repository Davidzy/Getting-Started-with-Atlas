[[intro_to_asc]]
== AsciiDoc 101

http://www.methods.co.nz/asciidoc/index.html[AsciiDoc] is a text document format for writing (among other things) books, ebooks, and documentation. The main advantages of AsciiDoc are that it is easy to use and plays well with O'Reilly's publishing tools, including Atlas. It's similar to wiki markup--if you can write a Wikipedia article, then you'll have no problem with AsciiDoc. This http://powerman.name/doc/asciidoc[Asciidoc cheat sheet] covers a lot of the nitty-gritty, but the following sections will give you an overview of the markup you'll use most frequently.

You can create and edit AsciiDoc in any text editor, and then add it to Atlas by either pasting it into the wiki interface or using git. If you're on Windows, you can use http://notepad-plus-plus.org/[Notepad++] or any other text editor. If you're on a Mac, you can use TextEdit, http://macromates.com/[TextMate] (which you can pair with an https://github.com/zuckschwerdt/asciidoc.tmbundle[AsciiDoc bundle]), http://www.barebones.com/products/textwrangler/[TextWrangler], or any of a number of choices. Or maybe you prefer old school vi or Emacs. That's okay, too. The important thing is that you use the AsciiDoc markup.

This chapter illustrates some of the most common elements used in writing technical documentation.

.Use the Source, Luke
[WARNING]
====
If you're viewing this document as a PDF, EPUB, or KF8, you're seeing the _output_ from the AsciiDoc source, rather than the AsciiDoc markup itself. Since this chapter is intended as an introduction to the markup, you should view the source, available at http://cdn.oreilly.com/atlas_docs.zip[cdn.oreilly.com/atlas_docs.zip].
====

=== Chapters

Each chapter should begin with a chapter title preceded by two equals signs. It's good practice to always include a unique ID string above the chapter title. Here's the markup:

----
[[unique_chapter_id]]
== Chapter Title
----

==== Top-Level Section
Within the chapter, this is the first and highest heading level. This markup designates AsciiDoc level 2 (equivalent to DocBook +<sect1>+). The markup looks like this:

-----------
=== Top-Level Section
-----------

==== Second-Level Section
This heading level should only follow a top-level heading. It designates AsciiDoc level 3 (equivalent to DocBook +<sect2>+). The markup looks like this:

-----------
==== Second-Level Section
-----------

==== Third-Level Section
This heading level should only follow a second-level heading. It designates AsciiDoc level 4 (equivalent to DocBook +<sect3>+). The markup looks like this:

-----------
===== Third-Level Section
-----------

=== Divide the Book into Parts

If you want to group your chapters into parts, navigate to the file that should be the first chapter in that part, and add the part markup above the chapter title. It’s good practice to always include a unique ID string above the part title.

Here's the markup:

----
[[unique_part_id]]
= Part Title

[[unique_chapter_id]]
== Chapter Title

Chapter text begins here.
----

To add introductory text in the part, add this +partintro+ markup after the part title, but before the chapter title:

----
[partintro]
--
Insert introductory text here.
--
----

=== Add a Preface

To add a preface, use this markup at the top of your preface file:

----
[preface]
== Preface Title

Preface text begins here.
----

=== Add a Dedication

To add a dedication, use this markup at the top of your dedication file:

----
[dedication]
= Dedication

Dedication text begins here.
----

[[INLINES]]
=== Inline Elements

Here's some _italic_, `monospaced` (aka ``constant-width'' or “CW”), *bold*, *+CW bold+*, ^super^, and ~sub~ text.

Standard O'Reilly font conventions are as follows. The correct asciidoc markup for each is shown below.

_&#x5f;Italic&#x5f;_:: Indicates new terms, URLs, email addresses, filenames, and file extensions. The asciidoc markup is one underscore character on either side of the text to be italic.

*&#x2a;Bold&#x2a;*:: A general-purpose tag provided for where you would use bold type to emphasize a word or phrase. (Note that http://oreilly.com/oreilly/author/stylesheet.html[O’Reilly house style] prefers italics for emphasis.)

+&#x2b;Constant width&#x2b;+:: Used for program listings, as well as within paragraphs to refer to program elements such as variable or function names, databases, data types, environment variables, statements, and keywords.

*+&#x2a;&#x2b;Constant width bold&#x2b;&#x2a;+*:: Used to show commands or other text that should be typed literally by the user. Note that the asterisk (*) pair must be outside and the plus-symbol (+) pair inside.

pass:[<replaceable>pass&#x3a;&#x5b;&#x3c;replaceable&#x3e;Constant width italic&#x3c;/replaceable&#x3e;&#x5d;</replaceable>]:: Indicates text that should be replaced with user-supplied values or by values determined by context. This inline element markup uses a docbook passthrough.

^&#x5e;Superscript&#x5e;^:: Superscript text.

~&#x7e;Subscript&#x7e;~:: Subscript text.

Hyperlinks:: For hyperlinks to external sources, use the following markup. The text inside the brackets will appear as a clickable link in online versions.
----
http://oreilly.com[Visit O'Reilly's website]
----


[WARNING]
====
Please do not use AsciiDoc's mechanisms for forcing line breaks, page breaks, or ``ruler'' lines, as these don't mesh with Atlas's book building tools.
====

[[XREFS]]
=== Cross-References

To generate a cross-reference, use this syntax:

----
<<ID>>
----

where `ID` is the anchor or BlockID of the target, which you place in double square-brackets above that block.

The Atlas build system will transform this ID into a standard cross-reference (or +<xref>+) for you: the rendered text will adjust automatically if you later move the target or reword its title, and it will work as a hyperlink in online versions. Any time you refer to another component of your book, please be sure to use xref markup, not hardcoded text.

<<XREF_TABLE>> shows the standard text generated from xrefs in PDF builds.

[[XREF_TABLE]]
.Standard Cross-Reference Formats
[width="50%",options="header"]
|=======
|Target|Generated Cross-Reference Text
|chapter|Chapter 17
|table|Table 4-1
|figure|Figure 2-3
|example|Example 3-5
|sidebar|"Fooing the Bar" on page 23
|section|"Inline Macros" on page 14
|=======

Here are some live examples (hover over the text in the PDF to locate the
hyperlink):

* See <<BLOCKS>> for details.
* The results is shown in <<FIG1>>.
* Flip ahead to <<advanced_asciidoc>> for a preview.

generated from this source:

----
* See <<BLOCKS>> for details.
* The results is shown in <<FIG1>>.
* Flip ahead to <<advanced_asciidoc>> for a preview.
----

[WARNING]
====
Please do not use AsciiDoc's optional `xreflabel` and `caption` features on anchors and xrefs, as these interfere with standard generated xref formats.
====

[[indexing]]
=== Indexing

We've extended http://www.methods.co.nz/asciidoc/userguide.html#\_indexes[indexing in AsciiDoc] to include ranges, sees, and see alsos.

Using the syntax below, you can insert index markers anywhere in your text. To include an index in your book, you must also include an _index.asciidoc_ file with a single header:

----
= Index
----

See the http://cdn.oreilly.com/atlas_docs.zip[AsciiDoc source] of this documentation for an example.

The complete list of indexing syntax follows.

Basic index entry:
----
((("primary index term")))
----

Secondary entry:
----
((("primary index term", "subentry")))
----

Tertiary entry:
----
((("primary index term", "subentry", "sub-subentry")))
----

An index entry with a range:
----
The future of ebooks is HTML5.((("HTML5", id="ix_html5", range="startofrange")))
In the following pages
...
blah blah blah canvas
blah blah blah local storage
blah blah blah geolocation
...
Learn HTML 5 today!(((range="endofrange", startref="ix_html5")))
----

An index entry with a “(see)” and no page reference:
----
Flash has been supplanted by HTML5.((("Flash", see="HTML5")))
----

A “(see also)” entry:
----
In addition to the Makerbot, RepRap also allows you to make 3-D stuff
((("Makerbot", seealso="RepRap")))
----

Changing how an entry is alphabetized:
----
Makerbot lets you produce your own 3-D trinkets.((("3-D", sortas="three-d")))
----

[WARNING]
====
For basic index entries without attributes (i.e., without ranges, a “see,” a “see also,” or a “sortas”), you do not need to enclose terms in quotation marks. For example, the following markup is fine:
----
(((XML, RDF, SPARQL)))
----
However, if you include any attributes, you must put all entries in quotes, e.g.:
----
((("XML", "RDF", "SPARQL", seealso="XQuery")))
----
====

Please refer to the http://www.methods.co.nz/asciidoc/userguide.html[AsciiDoc User Guide] or contact us if you have index entries with special characters (e.g., quote marks, commas) and need guidance on how to format the markup.

[[BLOCKS]]
=== Block Elements

[[SIDEBARS]]
==== Sidebars

Sidebar markup looks like this:

----
.Sidebar Title
****
Sidebar text is surrounded by four asterisk characters above and below.
****
----

Sidebars render like this:

.What's Going On, Anyway?
****
A general understanding of what is going on under the hood of Atlas will help you make the most of the system. One of the primary appeals of AsciiDoc is that it was created to export to http://www.docbook.org/[DocBook XML]. In other words, for each AsciiDoc markup syntax, there is an equivalent DocBook element. When you build your book (as described in <<building_and_debugging>>), Atlas converts the AsciiDoc to DocBook and then generates the book formats from that DocBook. This series of magical transformations is part of what makes writing in Atlas fun, but it also requires you to use the correct AsciiDoc markup for things to work right.

If you get a build error, the most likely cause is an AsciiDoc markup error. Atlas provides error message logs to help you troubleshoot and fix syntax errors. Read more about building and debugging in <<building_and_debugging>>.
****

[[Admonitions]]
==== Admonitions (Notes and Warnings)

Here are some admonitions:

[NOTE]
===============================
O'Reilly books traditionally make no visual distinction between the DocBook
+<note>+, +<tip>+, and +<important>+ elements.
===============================

.Titled Tip
[TIP]
===============================
We do support optional titles in admonitions (in most series).
===============================

.Titled Warning
[WARNING]
===============================
O'Reilly Animal books traditionally make no visual distinction between the
DocBook +<warning>+ and +<caution>+ elements.
===============================

[CAUTION]
===============================
This one is a +<caution>+.
===============================

[[figures_and_other_images]]
==== Figures and Other Images

Below this paragraph is <<FIG1>> (a figure, titled and cross-referenced). Figures appear exactly where you place them in the text, which can sometimes create PDF pages with a lot of white space. While it is not generally necessary, you can add an attribute of `float="true"` so that the text flows around the image:

----
[[FIG1]]
.A Figure
image::images/tiger.png[float="true"]
----

[[FIG1]]
.A Figure
[float="none"]
image::images/tiger.png["An image of a cartoonish tiger head"]

Or you may prefer an image with no caption, like so:

image::images/screenshot.png["A screenshot of the AsciiDoc homepage"]

===== Adding Alt Text to Images

To improve accessibility in your ebook files, please consider adding alt text to the images, like so:

----
[[FIG1]]
.A Figure
image::images/tiger.png["An image of a cartoonish tiger head"]
----

Or combine it with a `float="true"`:

----
[[FIG1]]
.A Figure
[float="true"]
image::images/tiger.png["An image of a cartoonish tiger head"]
----

===== Using AsciiDoc to Size Images

While it should not be necessary in most circumstances, you can control the size of an image in the PDF output by adding an absolute value of width or height, like so:

----
image::images/filename.png[width="2in"]

image::images/filename.png[height="2in"]
----

Or you can use scale as a percentage to limit the width:

----
image::images/filename.png[scale="75"]
----

Note that you should not include a percentage sign.

[[Lists]]
==== Lists

[[Labeled]]
===== Labeled (aka Variable or Term-Definition) Lists

Term 1::
  Definition/description
Term 2::
  Something else

[[Bulleted]]
===== Bulleted (aka Itemized) Lists

* lions
* tigers
** sabre-toothed
** teapotted
* Lions, tigers, and bears.
+
Use a plus sign (on its own line) with the text below to add a paragraph to a list item.


[[Ordered]]
===== Ordered (aka Numbered) Lists

. Preparation
. Assembly
.. Measure
.. Combine
.. Bake
. Applause
+
Use a plus sign (on its own line) with the text below to add a paragraph to a list item.

[[tables_desc]]
==== Tables

Atlas table styles vary slightly between series. If your material warrants something other than the default style as shown in <<STD_TABLE>>, please consult with your editor.

The Asciidoc markup for tables looks like this:

....
.A Table
[width="50%",options="header"]
|=======
|P|Q|P^Q
|T|T|T
|T|F|F
|F|T|F
|F|F|F
|=======
....

Depending on the particular series your book is in, it will render similar to this:

[[STD_TABLE]]
.A Table
[width="50%",options="header"]
|=======
|P|Q|P^Q
|T|T|T
|T|F|F
|F|T|F
|F|F|F
|=======

[[code_explanation]]
==== Code

The http://www.methods.co.nz/asciidoc/userguide.html[AsciiDoc documentation] refers to code blocks as ``listing'' blocks. Here's an example:

....
----
Hello world!

0        10        20        30        40
1234567890123456789012345678901234567890
----
....

Which will render like this:

----
Hello world!

0        10        20        30        40
1234567890123456789012345678901234567890
----

Contrast the code block above with <<EX1>>, which is a _formal_ code example (titled and cross-referenced). Here's the markup:

....
[[EX1]]
.An Example
====
----
Hello world!

0        10        20        30        40
1234567890123456789012345678901234567890
----
====
....

And here's how it renders:

[[EX1]]
.An Example
====
----
Hello world!

0        10        20        30        40
1234567890123456789012345678901234567890
----
====

[[inline-formatting]]
===== Inline Formatting Within Code

In AsciiDoc, there is no built-in mechanism for inline formatting within code. If you want to use inline formatting--in particular, for standard O'Reilly font conventions such as *+<userinput> (CW+bold)+* and _++<replaceable> (CW+italic)++_ or if you want to include line annotations--you can do so by using a passthrough block (see <<passthroughs>> for an explanation of passthroughs), like so:

++++
<screen>
hostname $ <userinput>date</userinput>
Sun Apr  1 12:34:56 GMT 1984
</screen>
++++

or this:

++++
<programlisting>
from __future__ import with_statement # This isn't required in Python 2.6
                          <lineannotation>Above is a comment in the code, while this is an "annotation"</lineannotation>
with open("<replaceable>hello.txt</replaceable>") as f:
    for line in f:        <lineannotation>(note regular italic here vs. constant-width in "hello.txt" on line above)</lineannotation>
        print line</programlisting>
++++

[[syntax_highlighting]]
===== Syntax Highlighting

The Atlas book-building toolchain supports syntax highlighting via http://pygments.org/[Pygments]. You need only add +[source]+ above each code block that you want to be syntax-highlighted, and specify the language of the code. For example, the following code:

....
[source,java]
----
int radius = 40;
float x = 110;
float speed = 0.5;
int direction = 1;
----
....

will render in the EPUB, PDF, and KF8 (Kindle Fire only) as follows:

[source,java]
----
int radius = 40;
float x = 110;
float speed = 0.5;
int direction = 1;
----

Pygments supports a wide variety of languages that can be used in +[source]+; see the full list available on the http://pygments.org/docs/lexers/[the Pygments website]. Ebook readers that do not have color screens will still display the highlighting, but in more subtle shades of gray.

Please note the following caveats:

* Highlighting will not be applied to any code that has inline markup (as described in <<inline-formatting>>), even if +[source]+ is added above the code block.
* The color scheme cannot be changed at this time.
* The PDF used for print will contain no highlighting.

[[external_code_files]]
===== External Code Files

To include an external code file that is text-only (no markup), use the +include::+ macro inside of a delimited code block, as shown here:

[source,java]
----
include::code/HelloWorld.java[]
----

To include an external file that contains inline markup (e.g., for callouts, line annotations, or inline font formatting), skip the code block delimiters around the +include::+ macro and instead place passthrough delimiters within the included file, like so:

include::code/inline_markup.txt[]

[[code_callouts]]
===== Code Callouts

http://www.sagehill.net/docbookxsl/AnnotateListing.html#Callouts[Code callouts] are used to mark specific lines of code with icons keyed to explanatory text outside the code block. These icon pairs function as bidirectional links in electronic PDF and downstream formats (i.e., you can click on the icon in the code to jump to the explanation, and vice versa).

The built-in AsciiDoc mechanism (shown below) is somewhat more limited; for one thing, icons are hyperlinked from text to code, but not vice versa. However, you can always use a passthrough block (see <<passthroughs>>) for full functionality..

If you have a need to refer to the same bit of explanatory text from more than one line of code, see <<callout-multiples>> (in <<advanced_asciidoc>>).

Here's the AsciiDoc markup for code callouts:

[[asc_callouts]]
....
----
Roses are red,
   Violets are blue. \<1>
Some poems rhyme;
   This one doesn't. \<2>
----
\<1> Violets actually have a color value of +#9933cc+.
\<2> This poem uses the literary device known as a "surprise ending."
....

which renders like this:

----
Roses are red,
   Violets are blue. <1>
Some poems rhyme;
   This one doesn't. <2>
----
<1> Violets actually have a color value of +#9933cc+.
<2> This poem uses the literary device known as a "surprise ending."

To use a DocBook passthrough for bidirectional callouts, the markup looks like this:

....
++++
<programlisting>Roses are red,
   Violets are blue. <co id="violets-co" linkends="violets"/>
Some poems rhyme;
   This one doesn't. <co id="poem-co" linkends="poem"/></programlisting>

<calloutlist>
  <callout id="violets" arearefs="violets-co">
    <para>Violets actually have a color value of +#9933cc+.</para>
  </callout>
  <callout id="poem" arearefs="poem-co">
    <para>This poem uses the literary device known as a &ldquo;surprise ending.&rdquo;</para>
  </callout>
</calloutlist>
++++
....

[WARNING]
===============================
If using passthroughs for callouts, please use the paired markup as shown above (not +<areaspec>+).
===============================

[[other_block_elements]]
==== Other Block Elements

++++
<remark>Use a passthrough block like this for notes to production staff</remark>
++++

// NB: AsciiDoc comments do _not_ get passed to DocBook output by default.

Here's a +<quote>+ attributed to Benjamin Disraeli (by Wilfred Meynell, according to Frank Muir):

[quote, Wilfred Meynell]
____
Many thanks; I shall lose no time in reading it.
____
