[[write_how_you_want]]
== Write How You Want

When you are using Altas to write your book, you have the option of writing in
the wiki interface or locally on your own computer. This chapter covers each
of those scenarios. Note that, as you write your book, you can jump back and
forth between the two writing environments. As long as you are saving in the
web interface or using git to `push` and `pull` from your local machine,
you'll always be in sync.

=== Working in the Atlas Wiki

If you've used a wiki before, you will find the Atlas interface to be very
familiar. In the following sections, you'll learn how to create and edit new
files in the interface.

==== Creating New Files

When you create your book in Atlas, it will have no files, as shown in <<blank_slate>>.

[[blank_slate]]
.When you create a new book in Atlas, you start off with a blank slate
image::images/blank_slate.png[]

You can create your first file by clicking on Open Editor. Atlas will
recognize that your book has no files, and you will be prompted to create one.
Click "Create your first file" and name the file, as shown in <<create_file>>.

[[create_file]]
.Create your first file
image::images/create_file.png[]

Once you've created the file, you're ready to start writing!

[[working_with_asciidoc_text]]
==== Working with AsciiDoc Text in Atlas

When you're working in the Atlas wiki interface, you will need to write in
AsciiDoc.footnote:[Atlas supports Markdown for less technically complex text.
Ask your editor if Markdown is a good fit for your project.] See
<<asciidoc_101>> for an introduction to AsciiDoc markup.

The Atlas wiki editor works just as you'd expect. Use the buttons to insert
simple AsciiDoc markup. For example, <<atlas_editor>> shows what happens when
you click the H1 button.

[[atlas_editor]]
.Use the Atlas wiki interface to write in your web browser
image::images/atlas_editor.png[]

Once you've entered some text, click Save and your changes will be committed
to a git repository that is created automatically each time you start a new
book. Optionally, you can enter a log message before you click Save, and it
will be included with the commit to the git repository, as show in
<<log_message>>. Read more about making the most of your git repository in
<<working_locally>> and <<cloning_to_github>>.

[[log_message]]
.It's good practice to add a meaningful log message
image::images/log_message.png[]

Note also that you can use the File Manager drop-down to jump to other files
or to create new ones.

[[adding_images]]
==== Adding Images via the Atlas Interface

You can upload images to your book directly in the Atlas wiki interface. Click
on Image manager and then select Choose File and finally Upload, as
shown in <<image_upload>>.

Once you've uploaded your image, Atlas will generate a thumbnail preview of
that image, which you can see at any time by bringing up the Image manager.

++++
<figure id="image_upload" float="none">
  <title>Upload your images within Atlas</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/image_upload.png"/>
    </imageobject>
  </mediaobject>
</figure>
++++

[NOTE]
=========
At this time, if you upload an image via git, the image will note have a thumbnail preview within the Image manager.
=========

You can also use the Image manager to insert the AsciiDoc reference to that
image:

. Place the cursor where you'd like to insert the image within the text.
. Click on Image manager.
. Select the thumbnail preview of the image you've uploaded and click Insert
(<<insert_image_asciidoc>>).

++++
<figure id="insert_image_asciidoc">
  <title>You've uploaded the image; now reference it within your document</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/insert_image_asciidoc.png"/>
    </imageobject>
  </mediaobject>
</figure>
++++


Once you click insert, Atlas will add something like the following to your
document:

----
image::images/insert_image_asciidoc.png[]
----

Read more about figure and image markup in <<figures_and_other_images>> in
<<asciidoc_101>>.

=== Tracking Changes in Atlas

Each time you save a change in the wiki interface or use git to push a change
to your repository (as described in <<committing_and_pushing>>), Atlas
displays that change on the Changes tab.

[[changes_in_atlas]]
.An Atlas change box shows additions and deletions made to the text
image::images/changes_in_atlas.png[]

<<changes_in_atlas>> shows a change that was saved to the repository via a
`git push`. In this change notification box, Atlas displays the author who
made the change along with the log message used during `git commit`. If the
author were to use the Save button on the wiki interface (instead of git), as
explained in <<working_with_asciidoc_text>>, the change would be captured and
displayed in the same way.

[[working_locally]]
=== Working Locally

Atlas sits on top of a git repository, giving you the flexibility to write how
and when you want. For example, suppose you have a long flight and want to
edit on the plane. No problem--just pull down your book files, make your
changes locally, and then push them back up when your connected to the
internet again. Or perhaps you'd rather skip the wiki interface entirely and
work on your local machine exclusively. That's fine too.

==== Cloning Your Book

In order to work locally, you will need to have http://git-scm.com/[git]
installed on your machine. 

Once you have git installed, click on the Metadata tab in the Atlas interface
to retrieve your git repository URL, as shown in <<git_repo_url>>.

[[git_repo_url]]
.Grab your git repository URL from the Metadata tab
image::images/git_repo_url.png[]

Now that you have the URL, you can use git to clone it to your computer. When
you clone the repo, you can optionally add the name of the directory, like so:

----
$ git clone https://adam%40oreilly.com@atlas-admin.oreilly.com/git/1230000000065.git getting_started_with_atlas/
Cloning into getting_started_with_atlas...
remote: Counting objects: 338, done.
remote: Compressing objects: 100% (337/337), done.
remote: Total 338 (delta 136), reused 0 (delta 0)
Receiving objects: 100% (338/338), 4.10 MiB | 534 KiB/s, done.
Resolving deltas: 100% (136/136), done.
----

This command will download all of the files into a directory named
_getting_started_with_atlas_, and that directory is now under version control
with git.

[NOTE]
========
All of the examples in this chapter use the command line git client. If the
command line is not for you, there are several GUI git clients available for
Windows, OS X, and Linux.
========

[[committing_and_pushing]]
==== Committing and Pushing

Now that you've got a local checkout of your project, you can open the
_.asciidoc_ file and make some edits. As explained in <<asciidoc_101>>,
AsciiDoc is a text-based markup language. You can use any text editor to edit
the files. <<editing_in_textmate>> shows edits being made to this chapter in
TextMate, a text editor for the Mac.

[[editing_in_textmate]]
.Editing an AsciiDoc file in TextMate
image::images/editing_in_textmate.png[]

Now it's time to commit the changes to the git repo. You can include a log
message `-m`. The `-a` means to include all changes.

----
$ git commit -a -m'added section on interfacing with the Atlas git backend'
[master 0e487ee] added section on interfacing with the Atlas git backend
 3 files changed, 46 insertions(+), 6 deletions(-)
 create mode 100644 images/editing_in_textmate.png
----

Finally, `push` your committed changes:

----
$ git push origin
Counting objects: 11, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (7/7), done.
Writing objects: 100% (7/7), 54.03 KiB, done.
Total 7 (delta 4), reused 0 (delta 0)
To https://adam%40oreilly.com@atlas-admin.oreilly.com/git/1230000000065.git
   ffb554d..90fd00f  master -> master
----

Now if you look in the Altas web interface, you will see the changes that you
made locally reflected in the wiki interface.

==== Fetching and Pulling 

You can also use git to pull down changes that were made in the wiki
environment or by other contributors. There are two ways of downloading
changes. One way is to use `fetch` followed by `merge`, as in this example:

----
$ git fetch
remote: Counting objects: 5, done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 3 (delta 2), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
From https://atlas-admin.oreilly.com/git/1230000000065
   cd86112..cba41ff  master     -> origin/master
----

`fetch` downloads the changes. Now use `merge` to bring your local files up to
date:

----
$ git merge origin
Updating cd86112..cba41ff
Fast-forward
 ch02.asciidoc |    3 ++-
 1 files changed, 2 insertions(+), 1 deletions(-)
----

Alternatively, you can use `pull`, which downloads the changes and merges them
in with a single command:

----
$ git pull
remote: Counting objects: 8, done.
remote: Compressing objects: 100% (6/6), done.
remote: Total 6 (delta 4), reused 0 (delta 0)
Unpacking objects: 100% (6/6), done.
From https://atlas-admin.oreilly.com/git/1230000000065
   cba41ff..a972d49  master     -> origin/master
Updating cba41ff..a972d49
Fast-forward
 ch02.asciidoc |   25 +++++++++++++++++++++++++
 1 files changed, 25 insertions(+), 0 deletions(-)
----

Using `push` and `pull` to interface with your Atlas repo is the just the
beginning of what you can do with git. Check out http://gitref.org/[Git
Reference] and <<cloning_to_github>> to learn what is possible.

==== Resolving Conflicts

When you use `git merge` or `git pull`, git will attempt to combine all
changes into one document. Sometimes, however, git will fail to combine the
text and your AsciiDoc file will have a conflict. This situation may arise if,
for example, two authors try to `push` changes to the same line of text.
Describing conflict resolution is beyond the scope of this document, but the
Git manual has an
http://schacon.github.com/git/user-manual.html#resolving-a-merge[excellent
overview] of git conflicts and how to resolve them.