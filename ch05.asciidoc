[[chapid_5]]
== Write How You Want

Atlas gives you the option to etc.

=== Working in the Atlas Wiki

Intro.

==== Working with AsciiDoc Text in Atlas


==== Adding Images via the Atlas Interface


=== Working Locally

Atlas sits on top of a git repository, giving you the flexibility to write how
and when you want. For example, suppose you have a long flight and want to
edit on the plane. No problem--just pull down your book files, make your
changes locally, and then push them back up when your connected to the
internet again. Or perhaps you'd rather skip the wiki interface entirely and
work on your local machine exclusively. That's fine too.

==== Cloning Your Book

In order to work locally, you will need to have http://git-scm.com/[git] installed on your machine. 

Once you have git installed, click on the "Metadata" tab in the Atlas interface to retrieve your git repository URL, as shown in <<git_repo_url>>.

[[git_repo_url]]
.Grab your git repository URL from the Metadata tab
image::images/git_repo_url.png

----
$ cd /the/local/directory
$ git add remote gollum git@example.makerpress.com
$ git push gollum master
----

This will push the repo up to your editing environment.  This is the way a lot of people start the projects.


* Add lots of images or code examples

The "Upload Attachment" feature is nice, but it can be a real drag if you want to add a bunch of images or code examples.  Using git locally is one of the best ways to get a bunch of files added quickly.  Al you have to do is bring down the repo and put the files into the "attachments" directory.  For example:

----
$ git clone git@example.makerpress.com:git_repo.git add_images_and_code
$ cd add_images_and_code
$ cd attachments
$ cp /some/image/dir/*.jpg .
$ cp /some/code/dir/*.c .
$ cd ..
$ git add attachments/*.*
$ git commit -a -m"Added a bunch of images and code"
$ git push origin master
$ cd ..
$ rm -rf add_images_and_code
----

You can not reference all these files in your document, like this:

----
  image::attachments/new_img.jpg[]
  ...
  include::attachments/new_code.c[]
----


* Clean up file names

The native Gollum interface doesn't allow you to change file names or manipulate the directory structure for your repo.  If you want to do this, you can just pull the repo down, make your changes in git, do your commit, and then push some files up.  For example:

----
$ git clone git@example.makerpress.com:git_repo.git move_files
$ cd move_files
$ git mv crappy_name.asciidoc nice_name.asciidoc
$ git rm unused_file.asciidoc
$ git commit -a -m"Changed some file names"
$ git push origin master
$ cd ..
$ rm -rf move_files
----


* Manipulate your repo with scripts

Suppose you want to do something sort of complex, like performing a global search and replace or converting all the URLs in your document into bit.ly links.  (Or whatever).  To do this, you can simple clone the repo, execute your script (or whatever), commit your changes, and then push the repo back up.  For example:

----
$ git clone git@example.makerpress.com:git_repo.git manipulate
$ cd manipulate
...
Run script to replace all URLs with equivalent bit.ly links
...
$ git commit -a -m"Changed all links to bit.ly links"
$ git push origin master
----

=== Resolving Conflicts

Describing conflict resolution is beyond the scope of this document, but Scontt Chacon's http://progit.org/book/[Pro git] book is an outstanding resource.
