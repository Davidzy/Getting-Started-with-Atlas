[[chapid_3]]
== Advanced AsciiDoc

This is another chapter, with some more esoteric/experimental things...

[[passthroughs]]
=== Passthroughs

<<chapid_2>> makes several to passthroughs, 

=== Underlined vs. Delimited

Section titles can be in either of two formats: "underlined" or delimited.

Note that the levels described in the http://www.methods.co.nz/asciidoc/userguide.html[AsciiDoc User Guide] can be confusing: in AsciiDoc, the document (book) is considered level 0; generally a chapter will be at AsciiDoc level 1 (unless you're dividing the book into parts), and sections within chapters start at AsciiDoc level 3 (which is equivalent to DocBook +<sect1>+).

Top-Level Section Title (Underlined Style)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Narrative text here.

Second-Level Section Title (Underlined Style)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
More text here.

Third-Level Section Title (Underlined Style)
++++++++++++++++++++++++++++++++++++++++++++
And some more here.

=== Challenging Inlines

Using inlines in AsciiDoc can be tricky:

* Delimiters may not be interpreted as intended if they don't abut whitespace on both sides; the fix for this is to double them up, as explained under http://www.methods.co.nz/asciidoc/userguide.html#X52[``Constrained and Unconstrained Quotes''] in the AsciiDoc User Guide. For example, compare how these render in the PDF: _+foo+ bar_ vs. _++foo++ bar_

* Attempting to nest inlines within each other may result in invalid DocBook (because the content model of one may not include the other). For example, *+foo+* requires the asterisk (*) pair outside and the plus-symbol (+) pair inside. If you try the other way around, the build will likely fail with this error message: 
----
Element emphasis is not declared in literal list of possible children
----
* For more precise semantics, you can always use ``passthroughs'' to
  embed DocBook markup as is,
  e.g. pass:[<replaceable>foo</replaceable>],
  pass:[<userinput>foo</userinput>], and
  pass:[<userinput><replaceable>foo</replaceable></userinput>] are
  fairly common in O'Reilly books, rendered as CWI, CWB, and CWBI,
  respectively (constant-width with italic, bold, and bold+italic).

For generic emphasis, you can also surround a string with single,
straight quotation marks (apostrophes): i.e., 'this' is equivalent to
_that_. As an enhancement for finer-tuned semantic distinctions
downstream, the ORM config supports the following variants, via 
`@role` attributes:

* to indicate a filename or path, use [role="filename"]'/path/to/file.ext' or [role="filename"]_/path/to/file.ext_
* for a book title, use [role="citetitle"]'This Book Needs No Title' or [role="citetitle"]_This Book Needs No Title_

To get curly quotes you can use asciidoc's mechanism for `singles' and
``doubles'' (or you can always use Unicode like so: &#x201C;quote
me&#x201D;). Note that it's also fine to leave straight quotes in
running text; part of our intake process curls quotes in body, while
leaving them unchanged in literal and code contexts.

Subscripts and superscripts work like so: H~2~O and 2^5^ = 32 (but if
you're doing math, you'd probably want to italicize the variables,
like so: _x_^2^ + _y_^2^ = _z_^2^).

If using footnotes, please place the macro footnote:[This is a standard
footnote.] directly after the text, with no space between (otherwise
you'll introduce extra space footnote:[This one has extraneous space
before the in-text mark (although the footnote itself is fine).]
before the in-text mark); footnotes at the end of a sentence belong
after the period.footnote:[If your footnote text includes +++[square
brackets]+++, you can escape them with a passthrough macro.]

.When Does an Image Not Belong in a Figure?
****
O'Reilly books generally use informal figures (standalone images
without captions) sparingly; please consult first with your editor.

Inline images (such as icons) are appropriate on occasion, but may
cause problems downstream, in addition to requiring additional
processing by illustration staff (for sizing relative to text) and
manual placement during production (to ensure that they align
appropriately). If you plan to use inline images, please discuss the
rationale early on with your editor and the illustration staff, and
call our attention to them when the book is submitted to production so
we can handle them properly.

Here's some dummy text around an inline image to demonstrate why these
can be problematic. Even if image:images/icons/up.png[] were sized
appropriately relative to the text height in the printed book and PDF,
that might not work so well for other downstream channels.  
****



++++
<remark>Go back to the first chapter for general asciidoc markup demo; below are some more esoteric/experimental things...</remark>
++++

[[callout-multiples]]
=== Yet More on Code Callouts

If you want to refer to the same explanation from more than one line
of code, please _do not_ use the built-in mechanism
(<<bad_dup_layout>>), which does not conform to house style.
Instead, use either <<alt_dup_layout>> or <<horiz_layout>>.

[[bad_dup_layout]]
.Built-in Mechanism (Vertical Layout Bad)
====
-----------------------------------------------------
 10/17/97   9:04         <DIR>    bin
 10/16/97  14:11         <DIR>    DOS            <1>
 10/16/97  14:40         <DIR>    Program Files
 10/16/97  14:46         <DIR>    TEMP
 10/17/97   9:04         <DIR>    tmp
 10/16/97  14:37         <DIR>    WINNT
 10/16/97  14:25             119  AUTOEXEC.BAT   <2>
  2/13/94   6:21          54,619  COMMAND.COM    <2>
 10/16/97  14:25             115  CONFIG.SYS     <2>
 11/16/97  17:17      61,865,984  pagefile.sys
  2/13/94   6:21           9,349  WINA20.386     <3>
-----------------------------------------------------
====
<1> This directory holds MS-DOS.
<2> System startup code for DOS. *[Too much whitespace; confusing to readers]*
<3> Some sort of Windows 3.1 hack.

<<alt_dup_layout>> uses the +<coref>+ element to refer to the same
+<callout>+ from multiple code lines.

[[alt_dup_layout]]
.Alternate Approach 1: Repeat Icon in Code
====
++++
<programlisting>
 10/17/97   9:04         &lt;DIR&gt;    bin
 10/16/97  14:11         &lt;DIR&gt;    DOS     <co id="co-id1" linkends="co1"/>
 10/16/97  14:40         &lt;DIR&gt;    Program Files
 10/16/97  14:46         &lt;DIR&gt;    TEMP
 10/17/97   9:04         &lt;DIR&gt;    tmp
 10/16/97  14:37         &lt;DIR&gt;    WINNT
 10/16/97  14:25             119  AUTOEXEC.BAT   <co id="co-id2" linkends="co2"/>
  2/13/94   6:21          54,619  COMMAND.COM    <coref linkend="co-id2"/>
 10/16/97  14:25             115  CONFIG.SYS     <coref linkend="co-id2"/>
 11/16/97  17:17      61,865,984  pagefile.sys
  2/13/94   6:21           9,349  WINA20.386     <co id="co-id3" linkends="co3"/>
</programlisting>

<calloutlist>
  <callout arearefs="co-id1" id="co1">
    <para>This directory holds MS-DOS.</para>
  </callout>
  <callout arearefs="co-id2" id="co2"> 
    <para>System startup code for DOS.</para>
  </callout>
  <callout arearefs="co-id3" id="co3">    
  <para>Some sort of Windows 3.1 hack.</para>
  </callout>
</calloutlist>
++++
====

<<horiz_layout>> uses a different mechanism for several code lines to
point to the same +<callout>+. In this case, each one gets a uniquely
numbered icon. This is done by placing multiple values in a single
+<callout arearefs=...>+ while duplicating the +@linkends+ value in
the corresponding +<co>+ elements in code.  Note also the use of
+<?dbfo...>+ markup below the +<calloutlist>+ opener; this adjusts the
alignment for side-by-side icons.

[[horiz_layout]]
.Alternate Approach 2: Unique Icons; Align Side-by-Side in Explanation 
====
++++
<programlisting>
 10/17/97   9:04         &lt;DIR&gt;    bin
 10/16/97  14:11         &lt;DIR&gt;    DOS      <co id="thing1-co" linkends="thing1"/>
 10/16/97  14:40         &lt;DIR&gt;    Program Files
 10/16/97  14:46         &lt;DIR&gt;    TEMP
 10/17/97   9:04         &lt;DIR&gt;    tmp
 10/16/97  14:37         &lt;DIR&gt;    WINNT
 10/16/97  14:25             119  AUTOEXEC.BAT   <co id="thing2-co" linkends="thing2"/>
  2/13/94   6:21          54,619  COMMAND.COM    <co id="thing3-co" linkends="thing2"/>
 10/16/97  14:25             115  CONFIG.SYS     
 11/16/97  17:17      61,865,984  pagefile.sys
  2/13/94   6:21           9,349  WINA20.386     <co id="thing5-co" linkends="thing3"/>
</programlisting>

<calloutlist>
<?dbfo label-width="1.75pc"?>
  <callout arearefs="thing1-co" id="thing1">
    <para>This directory holds MS-DOS.</para>
  </callout>
  <callout arearefs="thing2-co thing3-co" id="thing2"> 
    <para>System startup code for DOS.</para>
  </callout>
  <callout arearefs="thing5-co" id="thing3">    
  <para>Some sort of Windows 3.1 hack.</para>
  </callout>
</calloutlist>
++++
====

=== Experiments

==== Literal Blocks (asciidoc terminology)
Following the general asciidoc cheatsheat/samples; many of these don't
behave under our toolchain (or relative to house style), so please
ask before using anything here...

// ORMTODO: "literal" becomes <literallayout class="monospaced">

[literal]
Consul *necessitatibus* per id,
consetetur, eu pro everti postulant
homero verear ea mea, qui.

// ORMTODO: "verse" becomes <literallayout>, with inline markup

[verse]
Consul *necessitatibus* per id,
consetetur, eu pro everti postulant
homero verear ea mea, qui.

// ORMTODO: indented block becomes <literallayout class="monospaced">

  Consul *necessitatibus* per id,
  consetetur, eu pro everti postulant
  homero verear ea mea, qui.

// ORMTODO: dotted-delimited becomes <literallayout class="monospaced">
...................................
Consul *necessitatibus* per id,
consetetur, eu pro everti postulant
homero verear ea mea, qui.
...................................

// ORMTODO: "verse" plus underscore-delimited becomes <blockquote><literallayout>

[verse, William Blake, from Auguries of Innocence]
__________________________________________________
To see a world in a grain of sand,
And a heaven in a wild flower,
Hold infinity in the palm of your hand,
And eternity in an hour.
__________________________________________________


Finally, keep in mind that there may be situations where it's hard to
get Asciidoc to format something the way you want. Sometimes there's a
trick to get around it; sometimes it's better to use a passthrough
block to embed a bit of DocBook; and sometimes there may be a
different formatting approach that will mesh better with our
production systems. If you need to do something not illustrated in
this chapter, please ask mailto:toolsreq@oreilly.com[]...
